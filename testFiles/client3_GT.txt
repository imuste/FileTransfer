HTTP is the protocol that is used to get things over the web. Traditionally HTTP used TCP because it provides the reliability and in-order delivery that we need and we can deal with the overhead that comes with it. The newer versions of HTTP are starting to use different transport services such as QUIC to help solve some of this overhead for the speed.
When you fetch a web page for example, you have a human readable name, but this is converted to an IP address through DNS. The web page address has a host name (cs.tufts.edu) that shows the name of the server where the web page is loaded. Then the rest is the path to the actual page that we want to get (user/index.html).
HTTP is stateless which means that the client needs to fetch objects and the server does not keep any state or information about the requests it gets which means that each request is completely separate. So if we request a cs.tufts.edu/user/index.html page, the server is not going to remember that request after it completes it. So in this case when it gets this request, it will send the page but not any of the embedded information such as images, this needs to be requested separately by the client. The reason for this is that sometimes we don't need the embedded information such as images for accessibility or other reasons.
A scenario where it could make sense for the server to maintain a state of incoming requests, is when web pages want to customize their pages based on the user which is done with cookies. One way for a server to maintain this state is based on IP address but since this changes with the location of the user, it is not useful. Instead, the idea with cookies is that the server generates a number for the user and sends this to the browser, so if the browser visits a website, it will also send this number back so the server can add the information to that user's state. This is often done for a specific website, but we also have third party cookies which is used to do cross-site cookies so that a server can access your information and behavior not just from that site but from other sites as well. This is browser based and the browser is a client of the server.
Persistent TCP is the idea of using the same already existing TCP connection for multiple requests rather than closing the connection after each request and setting the connection back up for every new request. So with persistent TCP, we can make multiple requests which happens in HTTP 1.1, whereas in previous HTTP versions, there was non- persistent TCP used. One issue with persistent TCP is that the server needs to keep a state related to the connection and it can also open vulnerabilities to attacks because a client could just keep a connection open much longer than it needs it to exhaust server resources.